// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Enigma {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  hints       String
  solution    String
  qrCode      String?
  createdAt   DateTime     @default(now())
  users       UserEnigmas[]
}

// Join table for many-to-many relationship between User and Enigma
model UserEnigmas {
  userId   String
  enigmaId Int
  isSolved Boolean @default(false)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  enigma   Enigma @relation(fields: [enigmaId], references: [id], onDelete: Cascade)

  @@id([userId, enigmaId])
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  enigmas  UserEnigmas[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




